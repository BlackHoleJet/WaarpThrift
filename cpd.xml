<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="52" tokens="372">
<file line="1320" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1891" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
		public void read(org.apache.thrift.protocol.TProtocol iprot, R66Request struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true)
			{
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // MODE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.mode = RequestMode.findByValue(iprot.readI32());
							struct.setModeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // FROMUID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.fromuid = iprot.readString();
							struct.setFromuidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // DESTUID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.destuid = iprot.readString();
							struct.setDestuidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // FILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.file = iprot.readString();
							struct.setFileIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // RULE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.rule = iprot.readString();
							struct.setRuleIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 10: // INFO
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="347">
<file line="194" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="246" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
			_Fields.NOTRACE, _Fields.TID, _Fields.ACTION };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode",
				org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
						RequestMode.class)));
		tmpMap.put(_Fields.FROMUID, new org.apache.thrift.meta_data.FieldMetaData("fromuid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESTUID, new org.apache.thrift.meta_data.FieldMetaData("destuid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info",
]]>
</codefragment>
</duplication>
<duplication lines="55" tokens="343">
<file line="995" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1425" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
		R66Request typedOther = (R66Request) other;

		lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFromuid()).compareTo(typedOther.isSetFromuid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFromuid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromuid,
					typedOther.fromuid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDestuid()).compareTo(typedOther.isSetDestuid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDestuid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destuid,
					typedOther.destuid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, typedOther.file);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRule()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetInfo()).compareTo(typedOther.isSetInfo());
]]>
</codefragment>
</duplication>
<duplication lines="78" tokens="335">
<file line="938" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1715" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			schemes.put(TupleScheme.class, new transferRequestQuery_resultTupleSchemeFactory());
		}

		private R66Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, R66Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
]]>
</codefragment>
</duplication>
<duplication lines="78" tokens="335">
<file line="547" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1327" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3080" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			schemes.put(TupleScheme.class, new transferRequestQuery_argsTupleSchemeFactory());
		}

		private R66Request request; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			REQUEST((short) 1, "request");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 1: // REQUEST
						return REQUEST;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, R66Request.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
]]>
</codefragment>
</duplication>
<duplication lines="72" tokens="289">
<file line="941" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1718" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3470" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
		private R66Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="287">
<file line="860" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1227" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
	public boolean equals(R66Request that) {
		if (that == null)
			return false;

		boolean this_present_mode = true && this.isSetMode();
		boolean that_present_mode = true && that.isSetMode();
		if (this_present_mode || that_present_mode) {
			if (!(this_present_mode && that_present_mode))
				return false;
			if (!this.mode.equals(that.mode))
				return false;
		}

		boolean this_present_fromuid = true && this.isSetFromuid();
		boolean that_present_fromuid = true && that.isSetFromuid();
		if (this_present_fromuid || that_present_fromuid) {
			if (!(this_present_fromuid && that_present_fromuid))
				return false;
			if (!this.fromuid.equals(that.fromuid))
				return false;
		}

		boolean this_present_destuid = true && this.isSetDestuid();
		boolean that_present_destuid = true && that.isSetDestuid();
		if (this_present_destuid || that_present_destuid) {
			if (!(this_present_destuid && that_present_destuid))
				return false;
			if (!this.destuid.equals(that.destuid))
				return false;
		}

		boolean this_present_file = true && this.isSetFile();
		boolean that_present_file = true && that.isSetFile();
		if (this_present_file || that_present_file) {
			if (!(this_present_file && that_present_file))
				return false;
			if (!this.file.equals(that.file))
				return false;
		}

		boolean this_present_rule = true && this.isSetRule();
		boolean that_present_rule = true && that.isSetRule();
		if (this_present_rule || that_present_rule) {
			if (!(this_present_rule && that_present_rule))
				return false;
			if (!this.rule.equals(that.rule))
				return false;
		}

		boolean this_present_info = true && this.isSetInfo();
]]>
</codefragment>
</duplication>
<duplication lines="55" tokens="263">
<file line="1151" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1661" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
		StringBuilder sb = new StringBuilder("R66Request(");
		boolean first = true;

		sb.append("mode:");
		if (this.mode == null) {
			sb.append("null");
		} else {
			sb.append(this.mode);
		}
		first = false;
		if (isSetFromuid()) {
			if (!first)
				sb.append(", ");
			sb.append("fromuid:");
			if (this.fromuid == null) {
				sb.append("null");
			} else {
				sb.append(this.fromuid);
			}
			first = false;
		}
		if (isSetDestuid()) {
			if (!first)
				sb.append(", ");
			sb.append("destuid:");
			if (this.destuid == null) {
				sb.append("null");
			} else {
				sb.append(this.destuid);
			}
			first = false;
		}
		if (isSetFile()) {
			if (!first)
				sb.append(", ");
			sb.append("file:");
			if (this.file == null) {
				sb.append("null");
			} else {
				sb.append(this.file);
			}
			first = false;
		}
		if (isSetRule()) {
			if (!first)
				sb.append(", ");
			sb.append("rule:");
			if (this.rule == null) {
				sb.append("null");
			} else {
				sb.append(this.rule);
			}
			first = false;
		}
		if (isSetInfo()) {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="233">
<file line="32" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="32" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
			"R66Request");

	private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mode", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField FROMUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fromuid", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField DESTUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"destuid", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"file", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"rule", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="233">
<file line="1177" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1954" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			StringBuilder sb = new StringBuilder("transferRequestQuery_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class transferRequestQuery_resultStandardSchemeFactory implements
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="233">
<file line="786" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1566" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3319" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			StringBuilder sb = new StringBuilder("transferRequestQuery_args(");
			boolean first = true;

			sb.append("request:");
			if (this.request == null) {
				sb.append("null");
			} else {
				sb.append(this.request);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (request != null) {
				request.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class transferRequestQuery_argsStandardSchemeFactory implements
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="215">
<file line="1447" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="2074" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
		public void write(org.apache.thrift.protocol.TProtocol oprot, R66Request struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.mode != null) {
				oprot.writeFieldBegin(MODE_FIELD_DESC);
				oprot.writeI32(struct.mode.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.fromuid != null) {
				if (struct.isSetFromuid()) {
					oprot.writeFieldBegin(FROMUID_FIELD_DESC);
					oprot.writeString(struct.fromuid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.destuid != null) {
				if (struct.isSetDestuid()) {
					oprot.writeFieldBegin(DESTUID_FIELD_DESC);
					oprot.writeString(struct.destuid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.file != null) {
				if (struct.isSetFile()) {
					oprot.writeFieldBegin(FILE_FIELD_DESC);
					oprot.writeString(struct.file);
					oprot.writeFieldEnd();
				}
			}
			if (struct.rule != null) {
				if (struct.isSetRule()) {
					oprot.writeFieldBegin(RULE_FIELD_DESC);
					oprot.writeString(struct.rule);
					oprot.writeFieldEnd();
				}
			}
			if (struct.info != null) {
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="194">
<file line="754" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1534" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3287" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			transferRequestQuery_args typedOther = (transferRequestQuery_args) other;

			lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRequest()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request,
						typedOther.request);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("transferRequestQuery_args(");
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="194">
<file line="1145" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1922" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2905" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3695" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			transferRequestQuery_result typedOther = (transferRequestQuery_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
						typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("transferRequestQuery_result(");
]]>
</codefragment>
</duplication>
<duplication lines="63" tokens="193">
<file line="941" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1718" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2699" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3470" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
		private R66Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}
]]>
</codefragment>
</duplication>
<duplication lines="63" tokens="192">
<file line="1051" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1828" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
		public transferRequestQuery_result setSuccess(R66Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case SUCCESS:
					if (value == null) {
						unsetSuccess();
					} else {
						setSuccess((R66Result) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case SUCCESS:
					return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case SUCCESS:
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof transferRequestQuery_result)
]]>
</codefragment>
</duplication>
<duplication lines="63" tokens="192">
<file line="660" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1440" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3193" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
		public transferRequestQuery_args setRequest(R66Request request) {
			this.request = request;
			return this;
		}

		public void unsetRequest() {
			this.request = null;
		}

		/** Returns true if field request is set (has been assigned a value) and false otherwise */
		public boolean isSetRequest() {
			return this.request != null;
		}

		public void setRequestIsSet(boolean value) {
			if (!value) {
				this.request = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case REQUEST:
					if (value == null) {
						unsetRequest();
					} else {
						setRequest((R66Request) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case REQUEST:
					return getRequest();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case REQUEST:
					return isSetRequest();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof transferRequestQuery_args)
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="186">
<file line="1229" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2005" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
					transferRequestQuery_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new R66Result();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="186">
<file line="2511" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2941" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			sb.append(this.tid);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky,
				// and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class isStillRunning_argsStandardSchemeFactory implements SchemeFactory {
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="186">
<file line="838" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1617" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3369" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
					transferRequestQuery_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // REQUEST
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.request = new R66Request();
								struct.request.read(iprot);
								struct.setRequestIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="163">
<file line="574" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="965" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1354" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1742" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3107" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3494" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request",
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="161">
<file line="1285" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1856" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
					"Required field 'mode' was not present! Struct: " + toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
			ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and
			// doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class R66RequestStandardSchemeFactory implements SchemeFactory {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="157">
<file line="804" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1195" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1584" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1972" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3337" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
				request.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class transferRequestQuery_argsStandardSchemeFactory implements
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="155">
<file line="1288" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1859" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<file line="2520" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2950" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
			ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and
			// doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class R66RequestStandardSchemeFactory implements SchemeFactory {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="152">
<file line="806" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1197" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1586" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1974" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3339" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3744" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class transferRequestQuery_argsStandardSchemeFactory implements
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="151">
<file line="1414" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1937" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
							struct.setNotraceIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 20: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.tid = iprot.readI64();
							struct.setTidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 21: // ACTION
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.action = Action.findByValue(iprot.readI32());
							struct.setActionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="146">
<file line="653" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="929" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
			this.action = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
			case MODE:
				if (value == null) {
					unsetMode();
				} else {
					setMode((RequestMode) value);
				}
				break;

			case FROMUID:
				if (value == null) {
					unsetFromuid();
				} else {
					setFromuid((String) value);
				}
				break;

			case DESTUID:
				if (value == null) {
					unsetDestuid();
				} else {
					setDestuid((String) value);
				}
				break;

			case FILE:
				if (value == null) {
					unsetFile();
				} else {
					setFile((String) value);
				}
				break;

			case RULE:
				if (value == null) {
					unsetRule();
				} else {
					setRule((String) value);
				}
				break;

			case INFO:
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="146">
<file line="1106" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1474" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
					typedOther.notrace);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAction()) {
			lastComparison = org.apache.thrift.TBaseHelper
					.compareTo(this.action, typedOther.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="137">
<file line="1127" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1637" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<file line="762" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1153" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1542" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1930" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2465" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2913" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3295" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3703" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
					.compareTo(this.action, typedOther.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("R66Request(");
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="126">
<file line="2512" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2942" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3736" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="122">
<file line="257" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="303" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
				transferRequestQuery_args args = new transferRequestQuery_args();
				args.setRequest(request);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public R66Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_transferRequestQuery();
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="119">
<file line="242" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="270" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
						org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
						Action.class)));
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="117">
<file line="1634" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="2332" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
			BitSet incoming = iprot.readBitSet(12);
			if (incoming.get(0)) {
				struct.fromuid = iprot.readString();
				struct.setFromuidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.destuid = iprot.readString();
				struct.setDestuidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.file = iprot.readString();
				struct.setFileIsSet(true);
			}
			if (incoming.get(3)) {
				struct.rule = iprot.readString();
				struct.setRuleIsSet(true);
			}
			if (incoming.get(4)) {
				struct.info = iprot.readString();
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="110">
<file line="959" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="1272" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<codefragment>
<![CDATA[
			if (this.notrace != that.notrace)
				return false;
		}

		boolean this_present_tid = true && this.isSetTid();
		boolean that_present_tid = true && that.isSetTid();
		if (this_present_tid || that_present_tid) {
			if (!(this_present_tid && that_present_tid))
				return false;
			if (this.tid != that.tid)
				return false;
		}

		boolean this_present_action = true && this.isSetAction();
		boolean that_present_action = true && that.isSetAction();
		if (this_present_action || that_present_action) {
			if (!(this_present_action && that_present_action))
				return false;
			if (!this.action.equals(that.action))
				return false;
		}
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="109">
<file line="193" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<file line="2142" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TID_ISSET_ID = 0;
	private static final int __GLOBALSTEP_ISSET_ID = 1;
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="105">
<file line="147" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="193" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<file line="2142" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2723" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __MD5_ISSET_ID = 0;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="102">
<file line="244" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="290" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="386" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
					org.apache.thrift.async.AsyncMethodCallback<transferRequestQuery_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.request = request;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="101">
<file line="147" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Request.java"/>
<file line="193" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Result.java"/>
<file line="574" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="965" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1354" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="1742" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2142" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="2723" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3107" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="3494" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="100">
<file line="263" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="309" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="360" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<file line="405" path="J:\Git\github\waarp-digest\WaarpThrift\src\main\java\org\waarp\thrift\r66\R66Service.java"/>
<codefragment>
<![CDATA[
			public R66Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_transferRequestQuery();
]]>
</codefragment>
</duplication>
</pmd-cpd>